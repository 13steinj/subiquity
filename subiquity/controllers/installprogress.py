# Copyright 2015 Canonical, Ltd.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import datetime
import fcntl
import logging
import os
import subprocess

import urwid
import yaml

from systemd import journal

from subiquitycore import utils
from subiquitycore.controller import BaseController

from subiquity.ui.views.installprogress import ProgressView, Spinner


log = logging.getLogger("subiquitycore.controller.installprogress")

TARGET = '/target'
CURTIN_INSTALL_LOG = '/tmp/subiquity-curtin-install.log'

class InstallState:
    NOT_STARTED = 0
    RUNNING = 1
    DONE = 2
    ERROR = -1


class InstallProgressController(BaseController):
    signals = [
        ('installprogress:filesystem-config-done', 'filesystem_config_done'),
        ('installprogress:identity-config-done',   'identity_config_done'),
    ]

    def __init__(self, common):
        super().__init__(common)
        self.answers = self.all_answers.get('InstallProgress', {})
        self.answers.setdefault('reboot', False)
        self.progress_view = None
        self.install_state = InstallState.NOT_STARTED
        self.tail_proc = None
        self.journal_listener_handle = None
        self._identity_config_done = False
        self._event_indent = ""
        self._event_log = []
        self._syslog_identifier = 'curtin_event.%s' % (os.getpid(),)

    def filesystem_config_done(self):
        self.curtin_start_install()

    def identity_config_done(self):
        if self.install_state == InstallState.DONE:
            self.postinstall_configuration()
        else:
            self._identity_config_done = True

    def curtin_error(self):
        log.debug('curtin_error')
        title = _('An error occurred during installation')
        self.ui.set_header(title, _('Please report this error in Launchpad'))
        self.ui.set_footer(_("An error has occurred."))
        if self.progress_view is not None:
            self.progress_view.set_status(('info_error', "An error has occurred"))
            self.progress_view.show_complete(True)
        else:
            self.default()

    def run_command_logged(self, cmd, logfile_location, env):
        with open(logfile_location, 'wb', buffering=0) as logfile:
            log.debug("running %s", cmd)
            cp = subprocess.run(
                cmd, env=env, stdout=logfile, stderr=subprocess.STDOUT, stdin=subprocess.DEVNULL)
            log.debug("completed %s", cmd)
        return cp.returncode

    def curtin_event(self, event):
        e = {}
        for k, v in event.items():
            if k.startswith("CURTIN_"):
                e[k] = v
        log.debug("curtin_event received %r", e)
        event_type = event.get("CURTIN_EVENT_TYPE")
        if event_type not in ['start', 'finish']:
            return
        if event_type == 'start':
            message = event.get("CURTIN_MESSAGE", "??")
            if self.progress_view is None:
                self.footer_description.set_text(message)
                self._event_log.append(self._event_indent + message)
            else:
                self.progress_view.add_event(self._event_indent + message)
            self._event_indent += "  "
            self.footer_spinner.start()
        if event_type == 'finish':
            self._event_indent = self._event_indent[:-2]
            self.footer_spinner.stop()

    def start_journald_listener(self, identifier, callback):
        reader = journal.Reader()
        reader.add_match("SYSLOG_IDENTIFIER={}".format(identifier))
        #reader.seek_tail()
        def watch():
            if reader.process() != journal.APPEND:
                return
            for event in reader:
                callback(event)
        return self.loop.watch_file(reader.fileno(), watch)

    def _write_config(self, path, config):
        with open(path, 'w') as conf:
            datestr = '# Autogenerated by SUbiquity: {} UTC\n'.format(
                str(datetime.datetime.utcnow()))
            conf.write(datestr)
            conf.write(yaml.dump(config))

    def _get_curtin_command(self):
        config_file_name = 'subiquity-curtin-install.conf'

        if self.opts.dry_run:
            log.debug("Installprogress: this is a dry-run")
            config_location = os.path.join('.subiquity/', config_file_name)
            curtin_cmd = [
                "python3", "scripts/replay-curtin-log.py", "examples/curtin-events.json", self._syslog_identifier,
                ]
        else:
            log.debug("Installprogress: this is the *REAL* thing")
            config_location = os.path.join('/var/log/installer', config_file_name)
            curtin_cmd = ['curtin', '--showtrace', '-c', config_location, 'install']

        self._write_config(
            config_location,
            self.base_model.render(target=TARGET, syslog_identifier=self._syslog_identifier))

        return curtin_cmd

    def curtin_start_install(self):
        log.debug('Curtin Install: starting curtin')
        self.install_state = InstallState.RUNNING
        self.footer_description = urwid.Text("starting...")
        self.footer_spinner = Spinner(self.loop)
        self.ui.set_footer(urwid.Columns([('pack', urwid.Text("Install in progress:")), ('pack', self.footer_description), ('pack', self.footer_spinner)], dividechars=1))

        self.journal_listener_handle = self.start_journald_listener(self._syslog_identifier, self.curtin_event)

        curtin_cmd = self._get_curtin_command()

        log.debug('Curtin install cmd: {}'.format(curtin_cmd))
        env = os.environ.copy()
        if 'SNAP' in env:
            del env['SNAP']
        self.run_in_bg(
            lambda: self.run_command_logged(curtin_cmd, CURTIN_INSTALL_LOG, env),
            self.curtin_install_completed)

    def curtin_install_completed(self, fut):
        returncode = fut.result()
        log.debug('curtin_install: returncode: {}'.format(returncode))
        if returncode > 0:
            self.install_state = InstallState.ERROR
            self.curtin_error()
            return
        self.install_state = InstallState.DONE
        log.debug('After curtin install OK')
        self.loop.set_alarm_in(0.01, lambda loop, userdata: self.install_complete())

    def cancel(self):
        pass

    def install_complete(self):
        self.ui.progress_current += 1
        self.ui.set_footer("Install complete")
        if self._identity_config_done:
            self.postinstall_configuration()

    def postinstall_configuration(self):
        # If we need to do anything that takes time here (like running
        # dpkg-reconfigure maas-rack-controller, for example...) we
        # should switch to doing that work in a background thread.
        self.configure_cloud_init()
        self.copy_logs_to_target()

        if self.progress_view is not None:
            self.ui.set_header(_("Installation complete!"), "")
            self.progress_view.set_status(_("Finished install!"))
            self.progress_view.show_complete()

        if self.answers['reboot']:
            self.loop.set_alarm_in(0.01, lambda loop, userdata: self.reboot())

    def configure_cloud_init(self):
        if self.opts.dry_run:
            target = '.subiquity'
        else:
            target = TARGET
        self.base_model.configure_cloud_init(target)

    def copy_logs_to_target(self):
        if self.opts.dry_run:
            return
        utils.run_command(['cp', '-aT', '/var/log/installer', '/target/var/log/installer'])
        try:
            with open('/target/var/log/installer/installer-journal.txt', 'w') as output:
                subprocess.run(
                    ['journalctl'],
                    stdout=output, stderr=subprocess.STDOUT, stdin=subprocess.DEVNULL)
        except Exception:
            log.exception("saving journal failed")

    def update_log_tail(self):
        if self.tail_proc is None:
            return
        tail = self.tail_proc.stdout.read().decode('utf-8', 'replace')
        #self.progress_view.add_log_tail(tail)

    def start_tail_proc(self):
        tail_cmd = ['tail', '-n', '1000', '-F', CURTIN_INSTALL_LOG]
        log.debug('tail cmd: {}'.format(" ".join(tail_cmd)))
        self.tail_proc = utils.run_command_start(tail_cmd)
        stdout_fileno = self.tail_proc.stdout.fileno()
        fcntl.fcntl(
            stdout_fileno, fcntl.F_SETFL,
            fcntl.fcntl(stdout_fileno, fcntl.F_GETFL) | os.O_NONBLOCK)
        self.tail_watcher_handle = self.loop.watch_file(stdout_fileno, self.update_log_tail)

    def stop_tail_proc(self):
        if self.tail_proc is not None:
            self.loop.remove_watch_file(self.tail_watcher_handle)
            self.tail_proc.terminate()
            self.tail_proc = None

    def reboot(self):
        if self.opts.dry_run:
            log.debug('dry-run enabled, skipping reboot, quiting instead')
            self.signal.emit_signal('quit')
        else:
            # Should probably run curtin -c $CONFIG unmount -t TARGET first.
            utils.run_command(["/sbin/reboot"])

    def quit(self):
        if not self.opts.dry_run:
            utils.disable_subiquity()
        self.signal.emit_signal('quit')

    def default(self):
        log.debug('show_progress called')
        title = _("Installing system")
        excerpt = _("Please wait for the installation to finish.")
        self.ui.set_header(title, excerpt)
        self.progress_view = ProgressView(self, self.footer_spinner)
        for event in self._event_log:
            self.progress_view.add_event(event)
        self.start_tail_proc()
        self.ui.set_body(self.progress_view)
        if self.install_state == InstallState.ERROR:
            self.curtin_error()
        elif self.install_state == InstallState.RUNNING:
            self.progress_view.set_status(_("Install in progress"))
            self.ui.set_footer("Thank you for using Ubuntu!")
        elif self.install_state == InstallState.DONE:
            self.ui.set_header(_("Installation complete!"), "")
            self.progress_view.set_status(_("Finished install!"))
            self.progress_view.show_complete()


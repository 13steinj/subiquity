import jinja2
import os
import datetime
import yaml

CURTIN_STORAGE_CONFIG_FILE = '/tmp/subiquity-config.yaml'
CURTIN_STORAGE_CONFIG_HEADER = """
# Autogenerated by SUbiquity: {{DATE}} UTC
partitioning_commands:
 builtin: curtin block-meta custom

storage:
"""
CURTIN_STORAGE_CONFIG_TEMPLATE = """
# Autogenerated by SUbiquity: {{DATE}} UTC
partitioning_commands:
 builtin: curtin block-meta custom

storage:
  - id: {{TARGET_DISK_NAME}}
    type: disk
    ptable: msdos
    model: {{TARGET_DISK_MODEL}}
    serial: {{TARGET_DISK_SERIAL}}
  - id: {{TARGET_DISK_NAME}}1
    type: partition
    offset: 512MB
    size: 8GB
    device: {{TARGET_DISK_NAME}}
    flag: boot
  - id: {{TARGET_DISK_NAME}}2
    type: partition
    offset: 8512MB
    size: 1GB
    device: {{TARGET_DISK_NAME}}
  - id: {{TARGET_DISK_NAME}}1_root
    type: format
    fstype: ext4
    volume: {{TARGET_DISK_NAME}}1
  - id: {{TARGET_DISK_NAME}}2_home
    type: format
    fstype: ext4
    volume: {{TARGET_DISK_NAME}}2
  - id: {{TARGET_DISK_NAME}}1_mount
    type: mount
    path: /
    device: {{TARGET_DISK_NAME}}1_root
  - id: {{TARGET_DISK_NAME}}2_mount
    type: mount
    path: /home
    device: {{TARGET_DISK_NAME}}2_home
"""


def curtin_write_storage_actions(actions):
    curtin_config = yaml.dump(actions, default_flow_style=False)
    with open(CURTIN_STORAGE_CONFIG_FILE, 'w') as conf:
        conf.write(CURTIN_STORAGE_CONFIG_HEADER)
        conf.write(curtin_config)
        conf.close()


def curtin_write_storage_template(disk_name, disk_model, disk_serial):
    ''' write out the storage yaml template for curtin
        params:
            disk_name: kernel name of disk (/dev/sda)
            disk_model: disk model name
            disk_serial:  serial of disk from probert storage  output
    '''
    template = jinja2.Template(CURTIN_STORAGE_CONFIG_TEMPLATE,
                               undefined=jinja2.StrictUndefined)

    ctxt = {
        'DATE': str(datetime.datetime.utcnow()),
        'TARGET_DISK_NAME': os.path.basename(disk_name),
        'TARGET_DISK_MODEL': disk_model,
        'TARGET_DISK_SERIAL': disk_serial,
    }
    curtin_config = template.render(ctxt)
    with open(CURTIN_STORAGE_CONFIG_FILE, 'w') as conf:
        conf.write(curtin_config)
        conf.close()

    return CURTIN_STORAGE_CONFIG_FILE

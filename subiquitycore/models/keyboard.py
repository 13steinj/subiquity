# Copyright 2015 Canonical, Ltd.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import logging
from subiquitycore.model import BaseModel
from subiquitycore.utils import crypt_password


log = logging.getLogger('subiquitycore.models.keyboard')
kbddata = 'data/keyboards'

keyboard_format = """
# KEYBOARD CONFIGURATION FILE
# Generated by console-conf

# Consult the keyboard(5) manual page.

XKBMODEL="pc105"
XKB_LAYOUT="{layout}"
XKB_VARIANT="{variant}"
XKBOPTIONS=""

BACKSPACE="guess"
"""


class KeyboardModel(BaseModel):
    """ Model representing system keyboard
    """
    # signals = [ ]

    _layout = ''
    _variant = ''

    def __init__(self, opts):
        self.opts = opts
        self.keyboards = self.setup_keyboards()

    def get_signals(self):
        return self.signals

    def get_menu(self):
        return self.keyboards

    def get_layouts(self):
        return self.keyboards['layouts']

    def get_variants(self):
        return self.keyboards['variants']

    def get_signal_by_name(self, selection):
        for x, y, z in self.get_menu():
            if x == selection:
                return y

    def set_effective_layout(self, selected, state, user_data):
        if state:
            self._layout = user_data

    def set_effective_variant(self, selected, state, user_data):
        if state:
            self._variant = user_data

    @property
    def layout(self):
        return self._layout

    @property
    def variant(self):
        return self._variant

    def __repr__(self):
        return keyboard_format.format(layout=self.layout, variant=self.variant)

    def setup_keyboards(self):
        keyboards = {}
        layouts = []
        variants = {}
        with open(kbddata, 'r') as kbddata_fp:
            for line in kbddata_fp:
                if not line.startswith('C*'):
                    continue

                line = line.rstrip()
                keyboard = line.split('*')
                if keyboard[1] == 'layout':
                    keyboard = line.split('*')
                    layouts.append([ keyboard[3], keyboard[2] ])
                if keyboard[1] == 'variant':
                    if keyboard[3] is not '':
                        if not keyboard[2] in variants:
                            variants[ keyboard[2] ] = []
                        variants[ keyboard[2] ].append([ keyboard[4], keyboard[3] ])

        keyboards['layouts'] = layouts
        keyboards['variants'] = variants

        return keyboards
